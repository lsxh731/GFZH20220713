/****************************************************************************
** CopyRight(c) 2019,　北京知行新能科技有限公司
** All rights reserved
**
** 文件名称: mainwindow.cpp
** 摘要: 程序主界面框架类
**       
**
** 当前版本: 1.0.0.0
** 作者:  聂晓波
** 完成日期: 2018.11.27
**
** 取代版本:
** 作者:
** 完成日期：
**
** 历史修改记录:　
** 作者　　　　修改时间　　版本　　　修改版本
** 聂晓波     2018.11.27   V1.0      创建
**
****************************************************************************/
#include <iostream>
#include <qtextedit.h>
#include <qprogressbar.h>
#include <qtimer.h>
#include <qapplication.h>
#include <qmessagebox.h>
#include <qstringlist.h>
#include <stdio.h>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <ctype.h>
#include <time.h>
#include <string.h>
#include <fcntl.h>
#include <QMutex>
#include <QFile>
#include <QFileDialog>
#include <QTabWidget>
#include <QTextStream>
#include <QDateTime>
#include <QProgressBar>
#include <QSlider>

#include "mainwindow.h"
#include "gpiorw.h"

#ifdef UBUNTU_DEV //Compiler Switch
#include <linux/can.h>
#include <linux/can/raw.h>
#include <unistd.h>
extern int g_iCounter;
extern QMutex g_mutex;
extern struct can_frame g_frame;
extern struct can_frame g_IGBTframe;
extern struct STR_GPIODATA g_GPIOData;
#endif          //Compiler Switch
long int data_out;

CMymainWindow::CMymainWindow()
{
	m_pUi= new Ui::mainWindow;
	m_pUi->setupUi(this);
    //信号与槽
    connect(m_pUi->toolButton_TempCtl,SIGNAL(clicked()),this,SLOT(tempCtlBtn_clicked()));
	connect(m_pUi->toolButton_FaultSta,SIGNAL(clicked()),this,SLOT(faultStaBtn_clicked()));
	connect(m_pUi->toolButton_RunningSta,SIGNAL(clicked()),this,SLOT(runningStaBtn_clicked()));

	m_greenicon.addFile(QString::fromUtf8(QApplication::applicationDirPath()+"/"+"gct_ied_green.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_redicon.addFile(QString::fromUtf8(QApplication::applicationDirPath()+"/"+"gct_ied_red.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_yellowicon.addFile(QString::fromUtf8(QApplication::applicationDirPath()+"/"+"gct_ied_yellow.png"), QSize(), QIcon::Normal, QIcon::Off);

      initHomePage();
      initStatusPage();
      initSetPage();
	  initSlaveControlPage(m_yellowicon);
	  initMasterDIPage(m_yellowicon);
	  initProctype();
	  m_iTempCtlCnt = 0;
	  m_iRunningCnt = 0;
	  m_iFaultCnt=0;
	  m_itotaltime=0;
	  m_isecondcnt=0;
	  m_CANfd = -1;
	  m_nGPIOfd=-1;
      
#ifdef UBUNTU_DEV //Compiler Switch 
    /*****************GPIO Open*********************************/
    char *gpio_node = "/dev/gpiofpga_ctl";
     if((m_nGPIOfd = open(gpio_node, O_RDWR|O_NOCTTY|O_NDELAY))<0) {
           printf("GPIO Open %s failed!\n", gpio_node);
                return;
            }
        printf("GPIO Open success!\n");
		//初始化熄灭"报警灯",add by 2019.04.12
	m_Gpiorw.write_do(write_address_84,write_data_0,m_nGPIOfd);

    /************CAN Open*************************************/
    m_CANfd=openSerialPort();

    if (m_CANfd	 < 0) 
	{
        //QMessageBox::warning(this, tr("Error"), tr("Fail to open serial port!"));
        return ;
    }
	for(int i=0;i<MAX_SIZE;i++)
	{
		  //运行状态结构体初始化
		    m_struRunningDATA[i].iRestartprocFlag=-1;
			m_struRunningDATA[i].iNormaloperFlag=-1;
			m_struRunningDATA[i].iFaultProtFlag=-1;
			m_struRunningDATA[i].iFaultlockFlag=-1;
			m_struRunningDATA[i].iProtectedTimes=-1;
            m_struRunningDATA[i].iBlockpulseFlag=-1;
			m_struRunningDATA[i].iRecstartsigFlag=-1;
			m_struRunningDATA[i].iRecshutsigFlag=-1;
			//温度监控结构体初始化
	        m_struTempctlDATA[i].fIGBT1Temper=0;
		    m_struTempctlDATA[i].fIGBT2Temper=0;
		    m_struTempctlDATA[i].fIduct1Temper=0;
		    m_struTempctlDATA[i].fIduct2Temper=0;
		    m_struTempctlDATA[i].fInDCVolt=0;
		    m_struTempctlDATA[i].fOutACCurrent=0;
	}
	 for(int j=0;j<(MAX_SIZE/2);j++)
	 {
		  //故障状态结构体初始化(左边)
			m_struLeftFaultDATA[j].iOutovervoltFlag=-1;
			m_struLeftFaultDATA[j].iDCovervoltFlag=-1;
			m_struLeftFaultDATA[j].iDCundervoltFlag=-1;
			m_struLeftFaultDATA[j].iACcurrentwarnFlag=-1;
			m_struLeftFaultDATA[j].iACcurrentprocFlag=-1;
			m_struLeftFaultDATA[j].iIGBT1overtempFlag=-1;
			m_struLeftFaultDATA[j].iIGBT2overtempFlag=-1;
			m_struLeftFaultDATA[j].iIndu1overtempFlag=-1;
			m_struLeftFaultDATA[j].iIndu2overtempFlag=-1;
			m_struLeftFaultDATA[j].iDripulseblockFlag=-1;
			m_struLeftFaultDATA[j].iDigspecinterFlag=-1;
			m_struLeftFaultDATA[j].iAnaspecampoverFlag=-1;
			m_struLeftFaultDATA[j].iAnaspecfreqoverFlag=-1;
			m_struLeftFaultDATA[j].iDigspecampoverFlag=-1;
			m_struLeftFaultDATA[j].iDigspecfreqoverFlag=-1;
			m_struLeftFaultDATA[j].iIGBT1driprocFlag=-1;
			m_struLeftFaultDATA[j].iIGBT2driprocFlag=-1;
			m_struLeftFaultDATA[j].iIGBT3driprocFlag=-1;
			m_struLeftFaultDATA[j].iIGBT4driprocFlag=-1;
			m_struLeftFaultDATA[j].iIGBT5driprocFlag=-1;
			m_struLeftFaultDATA[j].iIGBT6driprocFlag=-1;
			//故障状态结构体初始化(右边)
			m_struRightFaultDATA[j].iOutovervoltFlag=-1;
			m_struRightFaultDATA[j].iDCovervoltFlag=-1;
			m_struRightFaultDATA[j].iDCundervoltFlag=-1;
			m_struRightFaultDATA[j].iACcurrentwarnFlag=-1;
			m_struRightFaultDATA[j].iACcurrentprocFlag=-1;
			m_struRightFaultDATA[j].iIGBT1overtempFlag=-1;
			m_struRightFaultDATA[j].iIGBT2overtempFlag=-1;
			m_struRightFaultDATA[j].iIndu1overtempFlag=-1;
			m_struRightFaultDATA[j].iIndu2overtempFlag=-1;
			m_struRightFaultDATA[j].iDripulseblockFlag=-1;
			m_struRightFaultDATA[j].iDigspecinterFlag=-1;
			m_struRightFaultDATA[j].iAnaspecampoverFlag=-1;
			m_struRightFaultDATA[j].iAnaspecfreqoverFlag=-1;
			m_struRightFaultDATA[j].iDigspecampoverFlag=-1;
			m_struRightFaultDATA[j].iDigspecfreqoverFlag=-1;
			m_struRightFaultDATA[j].iIGBT1driprocFlag=-1;
			m_struRightFaultDATA[j].iIGBT2driprocFlag=-1;
			m_struRightFaultDATA[j].iIGBT3driprocFlag=-1;
			m_struRightFaultDATA[j].iIGBT4driprocFlag=-1;
			m_struRightFaultDATA[j].iIGBT5driprocFlag=-1;
			m_struRightFaultDATA[j].iIGBT6driprocFlag=-1;
	 }
    m_notifier = new QSocketNotifier(m_CANfd, QSocketNotifier::Read, this);
	m_pGPIORecvThread =NULL;
	m_pGPIORecvThread = new GPIODataRecvThread(this,m_nGPIOfd);
	m_pGPIORecvThread->start();
	m_pTimer3s=new QTimer(this);
	m_pTimer5s=new QTimer(this);
	m_pTimer60s=new QTimer(this);
	connect(m_pTimer3s, SIGNAL(timeout()), this, SLOT(waiting3second()));
	connect(m_pTimer5s, SIGNAL(timeout()), this, SLOT(waiting5second()));
	connect(m_pTimer60s, SIGNAL(timeout()), this, SLOT(waiting60second()));
#endif //Compiler Switch	
}
CMymainWindow::~CMymainWindow()
{
 #ifdef UBUNTU_DEV //Compiler Switch
    delete m_pUi;
    if (m_notifier) 
	{
        delete m_notifier;
        m_notifier = NULL;
    }
    if (m_CANfd >= 0) 
	{
        ::close(m_CANfd);
        m_CANfd = -1;
    }
#endif     //Compiler Switch
	if(NULL!=m_pChainsetdlg)
	{
		delete m_pChainsetdlg;
		m_pChainsetdlg=NULL;
	}
	if(NULL!=m_pAdjcoefdlg)
	{
		delete m_pAdjcoefdlg;
		m_pAdjcoefdlg=NULL;
	}
}
//校准系数设置-槽函数
void CMymainWindow::adjBtn_clicked()
{   
    m_pUi->adjBtn->setBackgroundColor(m_mouseclickColor);
	int ret =m_logindlg.exec();
	if(m_logindlg.IsPWDCorrect())
	{
		m_logindlg.clearBtn_clicked();//清除密码
		m_pAdjcoefdlg->exec();
	}
	m_pUi->adjBtn->setBackgroundColor(m_defaultBgColor);
}
//连锁设置-槽函数
void CMymainWindow::chainBtn_clicked()
{
	m_pUi->chainBtn->setBackgroundColor(m_mouseclickColor);
	int ret =m_logindlg.exec();
	if(m_logindlg.IsPWDCorrect())
	{
		m_logindlg.clearBtn_clicked();//清除密码
		m_pChainsetdlg->exec();
	}
	m_ChainSetData=m_pChainsetdlg->getChainSetData();//获取连锁参数数据，add by 2019.04.13
	m_pUi->chainBtn->setBackgroundColor(m_defaultBgColor);
}
//保护阈值设置-槽函数
void CMymainWindow::thrBtn_clicked()
{
	m_pUi->thrBtn->setBackgroundColor(m_mouseclickColor);
	int ret =m_logindlg.exec();
	if(m_logindlg.IsPWDCorrect())
	{
		m_logindlg.clearBtn_clicked();//清除密码
		m_Thresholdsetdlg.show();
	} 
	m_pUi->thrBtn->setBackgroundColor(m_defaultBgColor);
}
//无效设置-槽函数
void CMymainWindow::invalidBtn_clicked()
{
	m_pUi->invalidBtn->setBackgroundColor(m_mouseclickColor);
	int ret =m_logindlg.exec();
	if(m_logindlg.IsPWDCorrect())
	{
		m_logindlg.clearBtn_clicked();//清除密码
	    m_Invalidsetdlg.exec();
	}
	m_pUi->invalidBtn->setBackgroundColor(m_defaultBgColor);
}
//直流设置-槽函数
void CMymainWindow::dcBtn_clicked()
{
	m_pUi->dcBtn->setBackgroundColor(m_mouseclickColor);
	m_DCSetdlg.exec();
	m_pUi->dcBtn->setBackgroundColor(m_defaultBgColor);
}
//"密码设置"-槽函数
void CMymainWindow::pwdsetBtn_clicked()
{
	m_pUi->pwdsetBtn->setBackgroundColor(m_mouseclickColor);
	m_Pwdsetdlg.clearBtn_clicked();//先清除历史输入痕迹
	m_Pwdsetdlg.exec();            //再打开密码设置对话框
	m_pUi->pwdsetBtn->setBackgroundColor(m_defaultBgColor);
}
//"语言类型切换"-槽函数
void CMymainWindow::langcomboBox_clicked(int index)
{
	QString m_strFriendlytips=QApplication::translate("mainWindow", 
		"\345\217\213\346\203\205\346\217\220\347\244\272", 
		0,
		QApplication::UnicodeUTF8);//友情提示

	QString strinfotemp=QApplication::translate("mainWindow",
		"\347\233\256\345\211\215\345\217\252\346\224\257\346\214\201\344\270\255\346\226\207\350\257\255\350\250\200", 
		0, 
		QApplication::UnicodeUTF8);//目前只支持中文语言

	switch(index)
	{
	case CHINESE_LANG:
		m_pUi->lang_comboBox->setCurrentIndex(CHINESE_LANG);
		break;
	case ENGLISH_LANG:
		QMessageBox::information(this, 
			tr(m_strFriendlytips), 
			tr(strinfotemp));
		m_pUi->lang_comboBox->setCurrentIndex(CHINESE_LANG);
		break;
	default:
		m_pUi->lang_comboBox->setCurrentIndex(CHINESE_LANG);
		break;
	}//switch(index)
}
//打开端口
int CMymainWindow::openSerialPort()
{
    int s=-1;
 #ifdef UBUNTU_DEV //Compiler Switch
   struct sockaddr_can addr;
   struct ifreq ifr;
    if ((s = socket(PF_CAN, SOCK_RAW, CAN_RAW)) < 0)
    {
        perror("Create socket failed");
        exit(-1);
    }
    //set up can interface 
    strcpy(ifr.ifr_name, "can0");
    //assign can device 
   ioctl(s, SIOCGIFINDEX, &ifr);
    addr.can_family = AF_CAN;
    addr.can_ifindex = ifr.ifr_ifindex;
   //bind can device 
    if(bind(s, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        perror("Bind can device failed\n");
        exit(-2);
    }
#endif  //Compiler Switch
    return s;

}
//接收运行状态CAN报文
void CMymainWindow::on_recvRunningCANRPT(int socket)
{
#ifdef UBUNTU_DEV //Compiler Switch
	struct can_frame frame;
    struct can_filter rfilter;
 
    rfilter.can_id = CAN_EFF_FLAG | 0x0C063027;//用于接收运行状态CAN报文
    rfilter.can_mask = CAN_EFF_MASK;
    if(setsockopt(m_CANfd, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter, sizeof(rfilter)) < 0)
    {
        perror("on_recvRunningCANRPT：set receiving filter error\n");
        return;
    }
     //keep reading 
    if(read(m_CANfd, &frame, sizeof(frame)) <= 0 )
	{
        perror("on_recvRunningCANRPT：read error\n");
        return;
    }
	m_iRunningCnt++;
	if(m_iRunningCnt%25==0)
	{
		m_iRunningCnt=0;//计数器清零
		/*printf ("on_recvRunningCANRPT####%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x####\n",
		           frame.data[0],
		           frame.data[1],
		           frame.data[2],
		           frame.data[3],
		           frame.data[4],
		           frame.data[5],
		           frame.data[6],
		           frame.data[7]);*/
		//解析运行状态数据
		m_CANDatarw.parseRunningStatData(frame,m_struRunningDATA[0]);//暂时只有一个模块，2019.04.06
	}

#endif //Compiler Switch
}
//接收故障状态CAN报文
void CMymainWindow::on_recvFaultCANRPT(int socket)
{
#ifdef UBUNTU_DEV //Compiler Switch
	struct can_frame frame;
    struct can_filter rfilter;
    rfilter.can_id = CAN_EFF_FLAG | 0x0C073027;//用于接收故障状态CAN报文
    rfilter.can_mask = CAN_EFF_MASK;
    if(setsockopt(m_CANfd, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter, sizeof(rfilter)) < 0)
    {
        perror("on_recvFaultCANRPT：set receiving filter error\n");
        return;
    }
     //keep reading 
    if(read(m_CANfd, &frame, sizeof(frame)) <= 0 )
	{
        perror("on_recvFaultCANRPT：read error\n");
        return;
    }
	m_iFaultCnt++;
	if(m_iFaultCnt%25==0)
	{
		m_iFaultCnt=0;//计数清零
		printf ("on_recvFaultCANRPT####%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x####\n",
		           frame.data[0],
		           frame.data[1],
		           frame.data[2],
		           frame.data[3],
		           frame.data[4],
		           frame.data[5],
		           frame.data[6],
		           frame.data[7]);
		//解析故障状态数据
		m_CANDatarw.parseFaultStatData(frame,m_struLeftFaultDATA[0]);//暂时只有一个模块，2019.04.07
	 }
#endif //Compiler Switch
}
void CMymainWindow::on_recvTempCtlCANRPT(int socket)
{
 #ifdef UBUNTU_DEV //Compiler Switch
	struct can_frame frame;
    struct can_filter rfilter;
    QString strTemp0,strTemp,strTemp2;

    int Cur,IGBTTemp1,IGBTTemp2;
  //set filter for only receiving packet with can id 0x1F 
   rfilter.can_id = CAN_EFF_FLAG | 0x0c083027;
   rfilter.can_mask = CAN_EFF_MASK;
   if(setsockopt(m_CANfd, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter, sizeof(rfilter)) < 0)
    {
        perror("on_recvTempCtlCANRPT：set receiving filter error\n");
        return;
    }
    //keep reading 

   if(read(m_CANfd, &frame, sizeof(frame)) <= 0 )
   {
        perror("on_recvTempCtlCANRPT：read error\n");
        return;
    }
    m_iTempCtlCnt++;
   	if(m_iTempCtlCnt%25==0)
	{
		m_iTempCtlCnt=0;//计数清零
		printf ("on_recvTempCtlCANRPT####%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x####\n",
		           frame.data[0],
		           frame.data[1],
		           frame.data[2],
		           frame.data[3],
		           frame.data[4],
		           frame.data[5],
		           frame.data[6],
		           frame.data[7]);
		//解析温度监控数据
		m_CANDatarw.parseTemperCtlData(frame,m_struTempctlDATA[0]);//暂时只有一个模块，2019.04.07
	 }

    /*Cur = (frame.data[2]*256+frame.data[3])/10;
    IGBTTemp1 = (frame.data[4]*256+frame.data[5])/64-256;
    IGBTTemp2 = (frame.data[6]*256+frame.data[7])/64-256;
	
    strTemp0 = QString::number(Cur,10);
    strTemp = QString::number(IGBTTemp1,10);
    strTemp2 = QString::number(IGBTTemp2,10);
    m_pUi->M1IGBTWD1_lEdit->setText(strTemp);
    m_pUi->M1IGBTWD2_lEdit->setText(strTemp2);
    m_pUi->M1DGWD1_lEdit->setText(strTemp0);*/
 #endif //Compiler Switch
}
//自定义事件处理函数
void CMymainWindow::customEvent(QEvent *event)
{
   switch(event->type()) 
	{
	case (QEvent::User+1000):
		{
          #ifdef UBUNTU_DEV //Compiler Switch
			 showPowerAmpRTdata();
			 showSlaveRTdata(m_iCurrFGnum);
			 //更新"紧急停机"状态灯
			 updateDI(g_GPIOData.iMasterDI[0],m_pUi->toolButton_jjtj); 
			 //更新"滑台过位移"状态灯
			 updateDI(g_GPIOData.iMasterDI[1],m_pUi->toolButton_htgwy);
			 //更新"振动台过位移"状态灯
			 updateDI(g_GPIOData.iMasterDI[2],m_pUi->toolButton_zdtgwy);
			 //更新"滑台低液位"状态灯
			 updateDI(g_GPIOData.iMasterDI[3],m_pUi->toolButton_htdyw);
			 //更新"振动台冷却"状态灯
			 updateDI(g_GPIOData.iMasterDI[4],m_pUi->toolButton_zdtlq);
			 //更新"滑台轴承低压"状态灯
			 updateDI(g_GPIOData.iMasterDI[5],m_pUi->toolButton_htzcdy);
			  //更新"振动台过温"状态灯
			 updateDI(g_GPIOData.iMasterDI[6],m_pUi->toolButton_zdtgw);
			 //更新"耳轴过位移"状态灯
			 updateDI(g_GPIOData.iMasterDI[7],m_pUi->toolButton_ezgwy);
			 //更新"功放热继保护"状态灯
			 updateDI(g_GPIOData.iMasterDI[8],m_pUi->toolButton_gfrjbh);
			 //更新"静压轴承低压"状态灯
			 updateDI(g_GPIOData.iMasterDI[9],m_pUi->toolButton_jyzcdy);
			 //更新"门保护"状态灯
			 updateDI(g_GPIOData.iMasterDI[10],m_pUi->toolButton_mbh);
			 //更新"系统冷却单元"状态灯
			 updateDI(g_GPIOData.iMasterDI[11],m_pUi->toolButton_xtlqdy);

			 //更新"分柜1整流器过温"状态灯（分柜）
			 updateDI(g_GPIOData.iSlaveDI[0],m_pUi->toolButton_fg1zlqgw);
			 //更新"分柜1门保护"状态灯（分柜）
			 updateDI(g_GPIOData.iSlaveDI[1],m_pUi->toolButton_fg1mbh);

			 //更新"分柜2整流器过温"状态灯（分柜）
			 updateDI(g_GPIOData.iSlaveDI[3],m_pUi->toolButton_fg2zlqgw);
			 //更新"分柜2门保护"状态灯（分柜）
			 updateDI(g_GPIOData.iSlaveDI[2],m_pUi->toolButton_fg2mbh);
			 
			 //更新"分柜3整流器过温"状态灯（分柜）
			 updateDI(g_GPIOData.iSlaveDI[5],m_pUi->toolButton_fg3zlqgw);
			 //更新"分柜3门保护"状态灯（分柜）
			 updateDI(g_GPIOData.iSlaveDI[4],m_pUi->toolButton_fg3mbh);

			 //更新"分柜4整流器过温"状态灯（分柜）
			 updateDI(g_GPIOData.iSlaveDI[6],m_pUi->toolButton_fg4zlqgw);
			 //更新"分柜4门保护"状态灯（分柜）
			 updateDI(g_GPIOData.iSlaveDI[7],m_pUi->toolButton_fg4mbh);
		 #endif  //Compiler Switch
		}
		break;
    
	default:
		break;
	}// switch(event->type()) 
}
//显示分柜实时数据
void CMymainWindow::showSlaveRTdata(int nCurrFGnum)
{
#ifdef UBUNTU_DEV //Compiler Switch
	updateStatusData(g_GPIOData.iSlaveStaValue[nCurrFGnum-1],m_pUi->toolButton_fgstatus);
	QString strTempVer;
    strTempVer= QString::number(g_GPIOData.fSlaveVolt[nCurrFGnum-1],'f',2);
    m_pUi->slavevolt_label->setText(strTempVer);  //显示分柜电压

    strTempVer= QString::number(g_GPIOData.fSlaveCurrent[nCurrFGnum-1],'f',2);
    m_pUi->slavecurrent_label->setText(strTempVer);//显示分柜电流

    strTempVer= QString::number(g_GPIOData.fSlaveBusVolt[nCurrFGnum-1],'f',2);
    m_pUi->busvolt_label_2->setText(strTempVer); //显示正负母线电压

    strTempVer= QString::number(g_GPIOData.fSlaveActBusVolt[nCurrFGnum-1],'f',2);
    m_pUi->actbusvolt_label->setText(strTempVer);//显示正母线电压
		
	strTempVer= QString::number(g_GPIOData.fSlaveNegBusVolt[nCurrFGnum-1],'f',2);
    m_pUi->negbusvolt_label_2->setText(strTempVer);//显示负母线电压
#endif  //Compiler Switch
}
//显示功放实时数据
void CMymainWindow::showPowerAmpRTdata()
{
#ifdef UBUNTU_DEV //Compiler Switch
	//更新运行状态灯
	updateStatusData(g_GPIOData.iRunningState,m_pUi->toolButton_yxstatus);
	//更新冷却状态灯
	updateStatusData(g_GPIOData.iCoolingState,m_pUi->toolButton_lqstatus);
	//更新励磁状态灯
	updateStatusData(g_GPIOData.iExcitationState,m_pUi->toolButton_licistatus);
	//更新准备状态灯
	updateStatusData(g_GPIOData.iReadyState,m_pUi->toolButton_readystatus);
	//更新增益状态灯
	updateStatusData(g_GPIOData.iGainState,m_pUi->toolButton_zengyistatus);

	QString strTempVer;
	strTempVer= QString::number(g_GPIOData.fTotalVolt,'f',2);
    m_pUi->lineEdit_totalvolt->setText(strTempVer);    //显示总输出电压

	strTempVer= QString::number(g_GPIOData.fTotalCurrent,'f',2);
    m_pUi->lineEdit_totalcurrent->setText(strTempVer); //显示总输出电流

    strTempVer= QString::number(g_GPIOData.fExcitVolt,'f',2);
    m_pUi->lineEdit_exitvolt->setText(strTempVer);    //显示励磁电压

	strTempVer= QString::number(g_GPIOData.fExcitCurrent,'f',2);
    m_pUi->lineEdit_exitcurrent->setText(strTempVer); //显示励磁电流

	strTempVer= QString::number(g_GPIOData.fPhaseAVolt,'f',2);
    m_pUi->lineEdit_AVolt->setText(strTempVer);      //显示A相电压

	strTempVer= QString::number(g_GPIOData.fPhaseBVolt,'f',2);
    m_pUi->lineEdit_BVolt->setText(strTempVer);      //显示B相电压

	strTempVer= QString::number(g_GPIOData.fPhaseCVolt,'f',2);
    m_pUi->lineEdit_CVolt->setText(strTempVer);      //显示C相电压

#endif  //Compiler Switch
}
//初始化主界面
void CMymainWindow::initHomePage()
{
    QColor defaultBgColor("#154b6b");
    m_pUi->lang_comboBox->setBackgroundColor(defaultBgColor);
	m_pUi->curtime_label->setStyleSheet("color:#ffff00;");
	if(m_pUi->tabWidget->currentIndex()!=HOME_PAGE_NUM)
	{
    	m_pUi->tabWidget->setCurrentIndex(HOME_PAGE_NUM);
	}
    QIcon logoicon,starticon,stopicon,reseticon;

	logoicon.addFile(QString::fromUtf8(QApplication::applicationDirPath()+"/"+"logo_right.png"), QSize(), QIcon::Normal, QIcon::Off);
	starticon.addFile(QString::fromUtf8(QApplication::applicationDirPath()+"/"+"start.png"), QSize(), QIcon::Normal, QIcon::Off);
	stopicon.addFile(QString::fromUtf8(QApplication::applicationDirPath()+"/"+"stop.png"), QSize(), QIcon::Normal, QIcon::Off);
	reseticon.addFile(QString::fromUtf8(QApplication::applicationDirPath()+"/"+"reset.png"), QSize(), QIcon::Normal, QIcon::Off);

	//设置logo图标
	m_pUi->toolButton_logo->setIcon(logoicon);
	m_pUi->toolButton_logo->setIconSize(QSize(107, 107));
	//设置功放控制组的"启动按钮"图标
	m_pUi->toolButton_gfstart->setIcon(starticon);
	m_pUi->toolButton_gfstart->setIconSize(QSize(64, 64));
	//设置功放控制组的"停止按钮"图标
	m_pUi->toolButton_gfstop->setIcon(stopicon);
	m_pUi->toolButton_gfstop->setIconSize(QSize(64, 64));
	//设置功放控制组的"复位按钮"图标
	m_pUi->toolButton_gfreset->setIcon(reseticon);
	m_pUi->toolButton_gfreset->setIconSize(QSize(64, 64));
	//设置增益控制组的"启动按钮"图标
	m_pUi->toolButton_zystart->setIcon(starticon);
	m_pUi->toolButton_zystart->setIconSize(QSize(64, 64));
	//设置增益控制组的"启动按钮"图标
	m_pUi->toolButton_zystop->setIcon(stopicon);
	m_pUi->toolButton_zystop->setIconSize(QSize(64, 64));
	//设置"运行状态"图标
	m_pUi->toolButton_yxstatus->setIcon(m_yellowicon);
	//设置冷却状态"图标
	m_pUi->toolButton_lqstatus->setIcon(m_yellowicon);
	//设置"励磁状态"图标
	m_pUi->toolButton_licistatus->setIcon(m_yellowicon);
	//设置"准备状态"图标
	m_pUi->toolButton_readystatus->setIcon(m_yellowicon);
	//设置"增益状态"图标
	m_pUi->toolButton_zengyistatus->setIcon(m_yellowicon);

	connect(m_pUi->comboBox_fgnum,SIGNAL(activated(int)),this,SLOT(comboBox_fgnum_clicked(int)));
	connect(m_pUi->lang_comboBox,SIGNAL(activated(int)),this,SLOT(langcomboBox_clicked(int)));
	//"功放控制"相关信号与槽函数
	connect(m_pUi->toolButton_gfstart,SIGNAL(clicked()),this,SLOT(gfstartBtn_clicked()));
	connect(m_pUi->toolButton_gfstop,SIGNAL(clicked()),this,SLOT(gfstopBtn_clicked()));
	connect(m_pUi->toolButton_gfreset,SIGNAL(clicked()),this,SLOT(gfresetBtn_clicked()));
	//"增益控制"相关信号与槽函数
	connect(m_pUi->toolButton_zystart,SIGNAL(clicked()),this,SLOT(zystartBtn_clicked()));
	connect(m_pUi->toolButton_zystop,SIGNAL(clicked()),this,SLOT(zystopBtn_clicked()));
	connect (m_pUi->horizontalSlider, SIGNAL(valueChanged (int)), this, SLOT(updateProgressBarValue(int)));
	//"功率模块启动与关机"相关信号与槽函数
	connect(m_pUi->startupBtn,SIGNAL(clicked()),this,SLOT(startupBtn_clicked()));
	connect(m_pUi->shutdownBtn,SIGNAL(clicked()),this,SLOT(shutdownBtn_clicked()));

	m_iCurrFGnum=1;
	m_iMode=NORMAL_MODE;
	QDateTime current_date_time =QDateTime::currentDateTime();
    QString current_date =current_date_time.toString("yyyy.MM.dd hh:mm:ss");
    m_pUi->curtime_label->setText(current_date);
	m_pUi->lineEdit_totalvolt->setEnabled(false);
	m_pUi->lineEdit_totalcurrent->setEnabled(false);
	m_pUi->lineEdit_exitvolt->setEnabled(false);
	m_pUi->lineEdit_exitcurrent->setEnabled(false);
	m_pUi->lineEdit_AVolt->setEnabled(false);
	m_pUi->lineEdit_BVolt->setEnabled(false);
	m_pUi->lineEdit_CVolt->setEnabled(false);

	 m_strProcType = tr("");//默认保护信息为空白
	 m_isFlash=false;
	 m_strInfo=QApplication::translate("mainWindow", 
		"\346\217\220\347\244\272", 
		0, 
		QApplication::UnicodeUTF8);//提示

	 QTimer *timer = new QTimer(this);
     connect(timer, SIGNAL(timeout()), this, SLOT(updateTime()));
     timer->start(1000);

	 //连锁参数结构体变量初始化,add by 2019.04.13
	 m_ChainSetData.iJjtjVal=SWITCH_INIT;  //紧急停机
	 m_ChainSetData.iHtgwyVal=SWITCH_INIT; //滑台过位移
     m_ChainSetData.iZdtgwyVal=SWITCH_INIT;//振动台过位移
     m_ChainSetData.iHtdywVal=SWITCH_INIT; //滑台低液位
	 m_ChainSetData.iZdtlqVal=SWITCH_INIT; //振动台冷却
	 m_ChainSetData.iHtzcdyVal=SWITCH_INIT;//滑台轴承低压
	 m_ChainSetData.iZdtgwVal=SWITCH_INIT; //振动台过温
	 m_ChainSetData.iEzgwyVal=SWITCH_INIT; //耳轴过位移
	 m_ChainSetData.iGfrjbhVal=SWITCH_INIT;//功放热继保护
	 m_ChainSetData.iJyzcdyVal=SWITCH_INIT;//静压轴承低压
     m_ChainSetData.iMenbVal=SWITCH_INIT;  //门保护
	 m_ChainSetData.iXtlqdyVal=SWITCH_INIT;//系统冷却单元
}
void  CMymainWindow::updateProgressBarValue(int nValue)
{
	//只显示10%，30%，50%，80%，100%
	switch(nValue+1)
	{
	case 10:
	case 30:
	case 50:
	case 80:
	case 100:
		m_pUi->progressBar->setValue(nValue+1);
		break;
	default:
		m_pUi->progressBar->setValue(nValue+1);//任何百分比都显示为宜
		break;
	}
}
//更新当前时间、历史文件存储及模控数据解析
void CMymainWindow::updateTime()
{
	QCoreApplication::processEvents();//避免界面冻结
	QDateTime current_date_time =QDateTime::currentDateTime();
    QString current_date =current_date_time.toString("yyyy.MM.dd hh:mm:ss");
	QString filedate =current_date_time.toString("yyyyMMddhhmm");
	int nHour=0;
	int nMin=0;
	int nSec=0;
	nHour=m_itotaltime/3600;
	nMin=m_itotaltime/60;
	nSec=m_itotaltime-nHour*3600-nMin*60;
	QString strTotaltime=QString::number(nHour,10)+tr("\345\260\217\346\227\266")+QString::number(nMin,10)+tr("\345\210\206\351\222\237")+QString::number(nSec,10)+tr("\347\247\222");
	//更新时间信息
	m_pUi->totaltime_label->setText(strTotaltime);
	m_pUi->curtime_label->setText(current_date);
	m_pUi->lasttime_label->setText(current_date); 
#ifdef UBUNTU_DEV //Compiler Switch
	//更新保护类型信息，add by 2019.04.12
	if(m_isFlash)
	{
	   m_pUi->proctypelabel->setText(tr(""));//内容为空白
       m_pUi->proctypelabel->setStyleSheet("color:black;border:1px solid gray;");//设置为黑色字体
	   m_isFlash=false;
	}
	else
	{
	   m_pUi->proctypelabel->setText(m_strProcType);
       m_pUi->proctypelabel->setStyleSheet("color:red;border:1px solid gray;");//设置为红色字体
	   m_isFlash=true;

	}
#endif //Compiler Switch
	//更新运行状态数据
	bool  isActive=false;
	isActive=m_RunStaWdget.isActiveWindow();
	bool  isVis=false;
	isVis=m_RunStaWdget.isVisible();
	if((isActive)||(isVis))
	{  
		m_struRunningDATA[0].strTime=current_date;//更新当前时间
	   m_RunStaWdget.updateRunningStatusData(&m_struRunningDATA[0]);//暂只有1个模块，2019.04.07
	 }
	//更新故障状态数据
	isActive=m_FaultCondWdgt.isActiveWindow();
	isVis=m_FaultCondWdgt.isVisible();
	if((isActive)||(isVis))
	{
		m_FaultCondWdgt.updateFaultConditionData(0,&m_struLeftFaultDATA[0],&m_struRightFaultDATA[0]);//暂只有1个模块
	}
	//更新温度监控数据
	isActive=m_TempmonitorWdgt.isActiveWindow();
	isVis=m_TempmonitorWdgt.isVisible();
	if((isActive)||(isVis))
	{
		m_TempmonitorWdgt.updateTemperatureData(0,&m_struTempctlDATA[0]);///暂只有1个模块
	}
	//历史数据存储
	createHisDataFile(filedate,current_date,m_itotaltime);
	m_itotaltime++;
}
//生成历史数据文件
void CMymainWindow::createHisDataFile(QString strfiledate,QString strCurrdate,int nTotaltime)
{
	 QFile file;
	 QString strHisfilepath=QApplication::applicationDirPath() + "/hisdata/";
	 if(nTotaltime%3600==0)
	 {
		 //满1个小时新建一个文件
		  strHisfilepath+=strfiledate;
		  strHisfilepath+=tr(".csv");
		  m_strHisfilepath=strHisfilepath;
		  file.setFileName(m_strHisfilepath); 
       if (!file.open(QIODevice::WriteOnly | QIODevice::Append))//文件追加写入
              return;
         QTextStream out(&file);
		 //输出文件头行信息
		 QStringList headfilelist;
		 headfilelist.append(tr("time"));
		 headfilelist.append(tr(","));
		 headfilelist.append(tr("second"));
		 headfilelist.append(tr(","));
		 headfilelist.append(tr("totalvolt(V)"));
		 headfilelist.append(tr(","));
		 headfilelist.append(tr("totalcurrent(A)"));
		 headfilelist.append(tr(","));
		 headfilelist.append(tr("excitvolt(V)"));
		 headfilelist.append(tr(","));
		 headfilelist.append(tr("excitcurrent(A)"));
		 headfilelist.append(tr(","));
		 headfilelist.append(tr("phaseAvolt(V)"));
		 headfilelist.append(tr(","));
		 headfilelist.append(tr("phaseBvolt(V)"));
		 headfilelist.append(tr(","));
		 headfilelist.append(tr("phaseCvolt(V)"));

		 out << headfilelist.at(0) << headfilelist.at(1)<< headfilelist.at(2)<< headfilelist.at(3)<< headfilelist.at(4)<< headfilelist.at(5)<< headfilelist.at(6)<< headfilelist.at(7)<< headfilelist.at(8)<<headfilelist.at(9)<< headfilelist.at(10)<<headfilelist.at(11)<< headfilelist.at(12)<<headfilelist.at(13)<<headfilelist.at(14)<<headfilelist.at(15)<<headfilelist.at(16)<<"\n";
	 }
	 else
	 {
		 file.setFileName(m_strHisfilepath); 
		 if (!file.open(QIODevice::WriteOnly | QIODevice::Append))//文件追加写入
              return;
         QTextStream out(&file);
		 QStringList datafilelist;
		 QString strTempVer;
		 datafilelist.append(strCurrdate);
		 datafilelist.append(tr(","));
		 datafilelist.append(QString::number(m_isecondcnt));
		 datafilelist.append(tr(","));
#ifdef UBUNTU_DEV //Compiler Switch	 
		 strTempVer= QString::number(g_GPIOData.fTotalVolt,'f',2);
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
	     strTempVer= QString::number(g_GPIOData.fTotalCurrent,'f',2);
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
         strTempVer= QString::number(g_GPIOData.fExcitVolt,'f',2);
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
	     strTempVer= QString::number(g_GPIOData.fExcitCurrent,'f',2);
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
	     strTempVer= QString::number(g_GPIOData.fPhaseAVolt,'f',2);
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
	     strTempVer= QString::number(g_GPIOData.fPhaseBVolt,'f',2);
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
	     strTempVer= QString::number(g_GPIOData.fPhaseCVolt,'f',2);
		 datafilelist.append(strTempVer);
#else
		 float ftmep=0.33;
		 strTempVer= QString::number(ftmep,'f',2);//totalvolt(V)
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
	     strTempVer= QString::number(ftmep,'f',2);//totalcurrent(A)
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
         strTempVer= QString::number(ftmep,'f',2);//excitvolt(V)
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
	     strTempVer= QString::number(ftmep,'f',2);//excitcurrent(A)
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
	     strTempVer= QString::number(ftmep,'f',2);//phaseAvolt(V)
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
	     strTempVer= QString::number(ftmep,'f',2);//phaseBvolt(V)
		 datafilelist.append(strTempVer);
		 datafilelist.append(tr(","));
	     strTempVer= QString::number(ftmep,'f',2);//phaseCvolt(V)
		 datafilelist.append(strTempVer);
#endif    //Compiler Switch
		 //输出文件数据信息
		  out << datafilelist.at(0) << datafilelist.at(1)<< datafilelist.at(2)<< datafilelist.at(3)<< datafilelist.at(4)<< datafilelist.at(5)<< datafilelist.at(6)<< datafilelist.at(7)<< datafilelist.at(8)<<datafilelist.at(9)<< datafilelist.at(10)<<datafilelist.at(11)<< datafilelist.at(12)<<datafilelist.at(13)<<datafilelist.at(14)<<datafilelist.at(15)<<datafilelist.at(16)<<"\n";
	 }
	 if(m_isecondcnt==59)
	 {
		 m_isecondcnt =0;//满59清0
	 }
	 else
	 {
		 m_isecondcnt++;
	 }
}
//状态记录页面初始化
void CMymainWindow::initStatusPage()
{
    QColor defaultBgColor("#0c172c");
    m_pUi->tableWidget->setBackgroundColor(defaultBgColor);
    m_pUi->tableWidget->horizontalHeader()->setStyleSheet("QHeaderView::section{background:skyblue;}"); 
    m_pUi->tableWidget->horizontalHeader()->setStyleSheet("color:#113e5b;"); 
    m_pUi->tableWidget->resizeColumnsToContents();
    QColor tabWidgetBgColor("#0c172c");
    m_pUi->tabWidget->setBackgroundColor(tabWidgetBgColor);

    m_pUi->totaltime_label->setStyleSheet("color:#ffff00;");
    m_pUi->lasttime_label->setStyleSheet("color:#ffff00;"); 
}
//设置选择页面初始化
void CMymainWindow::initSetPage()
{
    m_defaultBgColor=QColor("#154b6b");
    m_mouseclickColor=QColor("#1483c4");
#ifdef UBUNTU_DEV //Compiler Switch
	m_adjcoeficon.addFile(QString::fromUtf8("/bin/png/adjcoef.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_chainseticon.addFile(QString::fromUtf8("/bin/png/chainset.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_procfuncicon.addFile(QString::fromUtf8("/bin/png/login.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_procvalueicon.addFile(QString::fromUtf8("/bin/png/procvalue.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_dcseticon.addFile(QString::fromUtf8("/bin/png/dcset.png"), QSize(), QIcon::Normal, QIcon::Off);	
	m_invalidseticon.addFile(QString::fromUtf8("/bin/png/invalidset.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_tempericon.addFile(QString::fromUtf8("/bin/png/temperature.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_faultstatusicon.addFile(QString::fromUtf8("/bin/png/faultstatus.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_runningicon.addFile(QString::fromUtf8("/bin/png/running.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_hiscurveicon.addFile(QString::fromUtf8("/bin/png/hiscurve.png"), QSize(), QIcon::Normal, QIcon::Off);
#else
	m_adjcoeficon.addFile(QString::fromUtf8("adjcoef.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_chainseticon.addFile(QString::fromUtf8("chainset.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_procfuncicon.addFile(QString::fromUtf8("login.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_procvalueicon.addFile(QString::fromUtf8("procvalue.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_dcseticon.addFile(QString::fromUtf8("dcset.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_invalidseticon.addFile(QString::fromUtf8("invalidset.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_tempericon.addFile(QString::fromUtf8("temperature.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_faultstatusicon.addFile(QString::fromUtf8("faultstatus.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_runningicon.addFile(QString::fromUtf8("running.png"), QSize(), QIcon::Normal, QIcon::Off);
	m_hiscurveicon.addFile(QString::fromUtf8("hiscurve.png"), QSize(), QIcon::Normal, QIcon::Off);
#endif //Compiler Switch
	
	//校核系数按钮设置背景
	m_pUi->adjBtn->setIcon(m_adjcoeficon);
	m_pUi->adjBtn->setIconSize(QSize(54, 54));
	m_pUi->adjBtn->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);      
    m_pUi->adjBtn->setBackgroundColor(m_defaultBgColor);
	//连锁设置按钮设置背景
	m_pUi->chainBtn->setIcon(m_chainseticon);
	m_pUi->chainBtn->setIconSize(QSize(54, 54));
    m_pUi->chainBtn->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);    
    m_pUi->chainBtn->setBackgroundColor(m_defaultBgColor);
	//保护阈值按钮设置背景
	m_pUi->thrBtn->setIcon(m_procvalueicon);
	m_pUi->thrBtn->setIconSize(QSize(54, 54));
    m_pUi->thrBtn->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);   
    m_pUi->thrBtn->setBackgroundColor(m_defaultBgColor);
	//直流按钮设置背景
	m_pUi->dcBtn->setIcon(m_dcseticon);
	m_pUi->dcBtn->setIconSize(QSize(54, 54));
    m_pUi->dcBtn->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);       
    m_pUi->dcBtn->setBackgroundColor(m_defaultBgColor);
	//无效按钮设置背景
	m_pUi->invalidBtn->setIcon(m_invalidseticon);
	m_pUi->invalidBtn->setIconSize(QSize(54, 54));
    m_pUi->invalidBtn->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);  
    m_pUi->invalidBtn->setBackgroundColor(m_defaultBgColor);
	//密码设置按钮设置背景
	m_pUi->pwdsetBtn->setIcon(m_procfuncicon);
	m_pUi->pwdsetBtn->setIconSize(QSize(54, 54));
    m_pUi->pwdsetBtn->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);  
    m_pUi->pwdsetBtn->setBackgroundColor(m_defaultBgColor);

	//温度监控按钮设置背景
	m_pUi->toolButton_TempCtl->setIcon(m_tempericon);
	m_pUi->toolButton_TempCtl->setIconSize(QSize(48, 48));
    m_pUi->toolButton_TempCtl->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);  
    m_pUi->toolButton_TempCtl->setBackgroundColor(m_defaultBgColor);

	//故障状态按钮设置背景
	m_pUi->toolButton_FaultSta->setIcon(m_faultstatusicon);
	m_pUi->toolButton_FaultSta->setIconSize(QSize(48, 48));
    m_pUi->toolButton_FaultSta->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);  
    m_pUi->toolButton_FaultSta->setBackgroundColor(m_defaultBgColor);

	//运行状态按钮设置背景
	m_pUi->toolButton_RunningSta->setIcon(m_runningicon);
	m_pUi->toolButton_RunningSta->setIconSize(QSize(48, 48));
    m_pUi->toolButton_RunningSta->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);  
    m_pUi->toolButton_RunningSta->setBackgroundColor(m_defaultBgColor);

	//历史曲线按钮设置背景
	m_pUi->toolButton_HisCurve->setIcon(m_hiscurveicon);
	m_pUi->toolButton_HisCurve->setIconSize(QSize(48, 48));
    m_pUi->toolButton_HisCurve->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);  
    m_pUi->toolButton_HisCurve->setBackgroundColor(m_defaultBgColor);

	//信号与槽初始化
	connect(m_pUi->chainBtn,SIGNAL(clicked()),this,SLOT(chainBtn_clicked()));    //连锁设置
	connect(m_pUi->adjBtn,SIGNAL(clicked()),this,SLOT(adjBtn_clicked()));        //校核系数
    connect(m_pUi->thrBtn,SIGNAL(clicked()),this,SLOT(thrBtn_clicked()));        //保护阈值
	connect(m_pUi->pwdsetBtn,SIGNAL(clicked()),this,SLOT(pwdsetBtn_clicked()));  //密码设置
	connect(m_pUi->invalidBtn,SIGNAL(clicked()),this,SLOT(invalidBtn_clicked()));//无效设置
	connect(m_pUi->dcBtn,SIGNAL(clicked()),this,SLOT(dcBtn_clicked()));          //直流设置
	
	m_pAdjcoefdlg = new CAdjcoefdlg(m_nGPIOfd);
    m_pChainsetdlg = new CChainsetdlg(m_nGPIOfd);
}
//主柜开关量状态页面初始化
void CMymainWindow::initMasterDIPage(QIcon icon)
{
	//"紧急停机"状态灯初始化
	m_pUi->toolButton_jjtj->setIcon(icon);
	m_pUi->toolButton_jjtj->setIconSize(QSize(32, 32));
	//"滑台过位移"状态灯初始化
	m_pUi->toolButton_htgwy->setIcon(icon);
	m_pUi->toolButton_htgwy->setIconSize(QSize(32, 32));
	//"振动台过位移"状态灯初始化
	m_pUi->toolButton_zdtgwy->setIcon(icon);
	m_pUi->toolButton_zdtgwy->setIconSize(QSize(32, 32));
	//"滑台低液位"状态灯初始化
	m_pUi->toolButton_htdyw->setIcon(icon);
	m_pUi->toolButton_htdyw->setIconSize(QSize(32, 32));
	//"振动台冷却"状态灯初始化
	m_pUi->toolButton_zdtlq->setIcon(icon);
	m_pUi->toolButton_zdtlq->setIconSize(QSize(32, 32));
	//"滑台轴承低压"状态灯初始化
	m_pUi->toolButton_htzcdy->setIcon(icon);
	m_pUi->toolButton_htzcdy->setIconSize(QSize(32, 32));
	//"振动台过温"状态灯初始化
	m_pUi->toolButton_zdtgw->setIcon(icon);
	m_pUi->toolButton_zdtgw->setIconSize(QSize(32, 32));
	//"耳轴过位移"状态灯初始化
	m_pUi->toolButton_ezgwy->setIcon(icon);
	m_pUi->toolButton_ezgwy->setIconSize(QSize(32, 32));
	//"功放热继保护"状态灯初始化
	m_pUi->toolButton_gfrjbh->setIcon(icon);
	m_pUi->toolButton_gfrjbh->setIconSize(QSize(32, 32));
	//"静压轴承低压"状态灯初始化
	m_pUi->toolButton_jyzcdy->setIcon(icon);
	m_pUi->toolButton_jyzcdy->setIconSize(QSize(32, 32));
	//"门保护"状态灯初始化
	m_pUi->toolButton_mbh->setIcon(icon);
	m_pUi->toolButton_mbh->setIconSize(QSize(32, 32));
	//"系统冷却单元"状态灯初始化
	m_pUi->toolButton_xtlqdy->setIcon(icon);
	m_pUi->toolButton_xtlqdy->setIconSize(QSize(32, 32));

}
//分柜控制子页面初始化
void CMymainWindow::initSlaveControlPage(QIcon icon)
{
	//分柜运行状态按钮灯状态
	m_pUi->toolButton_fgstatus->setIcon(icon);
	m_pUi->toolButton_fgstatus->setIconSize(QSize(32, 32));
	//信号与槽初始化
   connect(m_pUi->toolButton_HisCurve,SIGNAL(clicked()),this,SLOT(hisCurveBtn_clicked()));
     /******状态灯颜色初始化******/
    //"分柜1整流器过温"状态灯初始化 
	 m_pUi->toolButton_fg1zlqgw->setIcon(icon);
	 m_pUi->toolButton_fg1zlqgw->setIconSize(QSize(32, 32));
	//"分柜1门保护"状态灯初始化 
	 m_pUi->toolButton_fg1mbh->setIcon(icon);
	 m_pUi->toolButton_fg1mbh->setIconSize(QSize(32, 32));

    //"分柜2整流器过温"状态灯初始化 
	 m_pUi->toolButton_fg2zlqgw->setIcon(icon);
	 m_pUi->toolButton_fg2zlqgw->setIconSize(QSize(32, 32));
	  //"分柜2门保护"状态灯初始化 
	 m_pUi->toolButton_fg2mbh->setIcon(icon);
	 m_pUi->toolButton_fg2mbh->setIconSize(QSize(32, 32));
	
    //"分柜3整流器过温"状态灯初始化 
	 m_pUi->toolButton_fg3zlqgw->setIcon(icon);
	 m_pUi->toolButton_fg3zlqgw->setIconSize(QSize(32, 32));
	 //"分柜3门保护"状态灯初始化 
	 m_pUi->toolButton_fg3mbh->setIcon(icon);
	 m_pUi->toolButton_fg3mbh->setIconSize(QSize(32, 32));

     //"分柜4整流器过温"状态灯初始化 
	 m_pUi->toolButton_fg4zlqgw->setIcon(icon);
	 m_pUi->toolButton_fg4zlqgw->setIconSize(QSize(32, 32));
	 //"分柜4门保护"状态灯初始化 
	 m_pUi->toolButton_fg4mbh->setIcon(icon);
	 m_pUi->toolButton_fg4mbh->setIconSize(QSize(32, 32));

    /******状态灯颜色初始化******/

}
//更新开入量数据
void CMymainWindow::updateDI(int nDIValue,QToolButton *ToolButton)
{
	switch(nDIValue)
	{
	case 0:
		ToolButton->setIcon(m_greenicon);
		ToolButton->setIconSize(QSize(32, 32));
		break;
	case 1:
		ToolButton->setIcon(m_redicon);
		ToolButton->setIconSize(QSize(32, 32));
		break;
	default:
		ToolButton->setIcon(m_yellowicon);
		ToolButton->setIconSize(QSize(32, 32));
		break;

	}//switch(nDIValue)
	 QCoreApplication::processEvents();//避免界面冻结
}
//更新状态数据
void CMymainWindow::updateStatusData(int nStaValue,QToolButton *ToolButton)
{
	switch(nStaValue)
	{
	case 0:
		ToolButton->setIcon(m_redicon);
		ToolButton->setIconSize(QSize(32, 32));
		break;
	case 1:
		ToolButton->setIcon(m_greenicon);
		ToolButton->setIconSize(QSize(32, 32));
		break;
	default:
		ToolButton->setIcon(m_yellowicon);
		ToolButton->setIconSize(QSize(32, 32));
		break;

	}//switch(nStaValue)
	 QCoreApplication::processEvents();//避免界面冻结
}
//打开"温度监控"子界面(数据源为CAN总线)
void CMymainWindow::tempCtlBtn_clicked()
{
#ifdef UBUNTU_DEV //Compiler Switch
	//断开运行状态信号连接
	disconnect(m_notifier,0,0,0);
	//接收温度监控CAN报文（启动信号连接）  
	connect(m_notifier, SIGNAL(activated(int)), this, SLOT(on_recvTempCtlCANRPT(int)));
#endif
	m_pUi->toolButton_TempCtl->setBackgroundColor(m_mouseclickColor);
	m_TempmonitorWdgt.show();
	m_pUi->toolButton_TempCtl->setBackgroundColor(m_defaultBgColor);

}
//打开"故障状态"子界面(数据源为CAN总线)
void CMymainWindow::faultStaBtn_clicked()
{
#ifdef UBUNTU_DEV //Compiler Switch
	//断开运行状态信号连接
	disconnect(m_notifier,0,0,0);
	//接收故障状态CAN报文（启动信号连接）  
	connect(m_notifier, SIGNAL(activated(int)), this, SLOT(on_recvFaultCANRPT(int)));
#endif
	m_pUi->toolButton_FaultSta->setBackgroundColor(m_mouseclickColor);
	m_FaultCondWdgt.show();
	m_pUi->toolButton_FaultSta->setBackgroundColor(m_defaultBgColor);
}
//打开"运行状态"子界面(数据源为CAN总线)
void  CMymainWindow::runningStaBtn_clicked()
{
#ifdef UBUNTU_DEV //Compiler Switch
	//断开运行状态信号连接
	disconnect(m_notifier,0,0,0);
	//接收运行状态CAN报文（启动信号连接）  
	connect(m_notifier, SIGNAL(activated(int)), this, SLOT(on_recvRunningCANRPT(int)));
#endif
	m_pUi->toolButton_RunningSta->setBackgroundColor(m_mouseclickColor);
	m_RunStaWdget.show();
	m_RunStaWdget.initRunningStatus();
	m_pUi->toolButton_RunningSta->setBackgroundColor(m_defaultBgColor);	

}
//打开"历史曲线"子界面(槽函数)
void CMymainWindow::hisCurveBtn_clicked()
{
	m_pUi->toolButton_HisCurve->setBackgroundColor(m_mouseclickColor);
	m_HiscurveWdget.exec();
	m_pUi->toolButton_HisCurve->setBackgroundColor(m_defaultBgColor);
}
//功放启动-槽函数
void CMymainWindow::gfstartBtn_clicked()
{
	QString strStartEnd=QApplication::translate("mainWindow", 
		"\345\212\237\346\224\276\345\220\257\345\212\250\346\223\215\344\275\234\347\273\223\346\235\237",
		0, 
		QApplication::UnicodeUTF8);//功放启动操作结束
	
#ifdef UBUNTU_DEV //Compiler Switch
	m_pUi->toolButton_gfstart->setEnabled(false);//禁用状态
	int buffer_read[MAX_SIZE];
	memset(buffer_read,0,sizeof(buffer_read));
    long int ret_ai_data;
    long int ret_di_data;
	 m_strlistProcType.clear();
	//读取是否有保护的数据
	 printf("#####begin to read proc data#####\n");
	 printf("#####m_nGPIOfd=%d#####\n",m_nGPIOfd);
	 m_Gpiorw.read_adi(read_address_di_08,buffer_read,m_nGPIOfd);
     ret_di_data = m_Gpiorw.ai_data_compute(buffer_read);
	 printf("#####read proc data have finished#####\n");
	 //需与连锁设置参数“与逻辑”，add by 2019.04.14
	 int cnt_proc=0;
	 if(buffer_read[0]==1)
	 {
		 m_strlistProcType.append(m_strjjtj);//紧急停机
		 if(m_ChainSetData.iJjtjVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iJjtjVal=%d--cnt_proc=%d##\n",m_ChainSetData.iJjtjVal,cnt_proc);
		 }
	 }
	 if(buffer_read[1]==1)
	 {
		 m_strlistProcType.append(m_strhtgwy);//滑台过位移
		 if(m_ChainSetData.iHtgwyVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iHtgwyVal=%d--cnt_proc=%d##\n",m_ChainSetData.iHtgwyVal,cnt_proc);
		 }
	 }
	 if(buffer_read[2]==1)
	 {
		 m_strlistProcType.append(m_strzdtgwy);//振动台过位移
		 if(m_ChainSetData.iZdtgwyVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iZdtgwyVal=%d--cnt_proc=%d##\n",m_ChainSetData.iZdtgwyVal,cnt_proc);
		 }
	 }
	 if(buffer_read[3]==1)
	 {
		 m_strlistProcType.append(m_strhtdyw);//滑台低液位
		 if(m_ChainSetData.iHtdywVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iHtdywVal=%d--cnt_proc=%d##\n",m_ChainSetData.iHtdywVal,cnt_proc);
		 }
	 }
	 if(buffer_read[4]==1)
	 {
		 m_strlistProcType.append(m_strzdtlq);//振动台冷却
		 if(m_ChainSetData.iZdtlqVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iZdtlqVal=%d--cnt_proc=%d##\n",m_ChainSetData.iZdtlqVal,cnt_proc);
		 }
	 }
	 if(buffer_read[5]==1)
	 {
		 m_strlistProcType.append(m_strhtzcdy);//滑台轴承低压
		 if(m_ChainSetData.iHtzcdyVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iHtzcdyVal=%d--cnt_proc=%d##\n",m_ChainSetData.iHtzcdyVal,cnt_proc);
		 }
	 }
	 if(buffer_read[6]==1)
	 {
		 m_strlistProcType.append(m_strzdtgw); //振动台过温
		 if(m_ChainSetData.iZdtgwVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iZdtgwVal=%d--cnt_proc=%d##\n",m_ChainSetData.iZdtgwVal,cnt_proc);
		 }
	 }
	 if(buffer_read[7]==1)
	 {
		 m_strlistProcType.append(m_strezgwy);//耳轴过位移
		 if(m_ChainSetData.iEzgwyVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iEzgwyVal=%d--cnt_proc=%d##\n",m_ChainSetData.iEzgwyVal,cnt_proc);
		 }
	 }
	 if(buffer_read[8]==1)
	 {
		 m_strlistProcType.append(m_strgfrjbh);//功放热继保护
		 if(m_ChainSetData.iGfrjbhVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iGfrjbhVal=%d--cnt_proc=%d##\n",m_ChainSetData.iGfrjbhVal,cnt_proc);
		 }
	 }
	 if(buffer_read[9]==1)
	 {
		 m_strlistProcType.append(m_strjyzcdy);//静压轴承低压
		 if(m_ChainSetData.iJyzcdyVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iJyzcdyVal=%d--cnt_proc=%d##\n",m_ChainSetData.iJyzcdyVal,cnt_proc);
		 }
	 }
	 if(buffer_read[10]==1)
	 {
		 m_strlistProcType.append(m_strmbh);  //门保护
		 if(m_ChainSetData.iMenbVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iMenbVal=%d--cnt_proc=%d##\n",m_ChainSetData.iMenbVal,cnt_proc);
		 }
	 }
	 if(buffer_read[11]==1)
	 {
		 m_strlistProcType.append(m_strxtlqdy);//系统冷却单元
		 if(m_ChainSetData.iXtlqdyVal==SWITCH_ON)
		 {
			  cnt_proc++;
			  printf("##gfstartBtn_clicked()::iXtlqdyVal=%d--cnt_proc=%d##\n",m_ChainSetData.iXtlqdyVal,cnt_proc);
		 }
	 }

	if(cnt_proc==0)
	{
		//没有"保护"，则台体、功放冷却系统启动（指令或者继电器）
		printf("#####no proc exist#####\n");
		 //台体、功放冷却系统启动（指令或者继电器）
		m_Gpiorw.write_do(write_address_0C,write_data_1,m_nGPIOfd);
		 //LED Panel-警报灯灭
		m_Gpiorw.write_do(write_address_84,write_data_0,m_nGPIOfd);
		//等待5秒钟
		m_pTimer5s->start();//启动5s定时器，add by 2019.04.14
		
	}
	else
	{
		/******有保护存在******/
		 //LED Panel-点亮警报灯,峰鸣器响
		m_Gpiorw.write_do(write_address_84,write_data_1,m_nGPIOfd);
		printf("####Lighting the alarm lights####\n");
		//显示保护信息
		QString strtmep=QApplication::translate("mainWindow", 
			"\344\277\235\346\212\244\347\261\273\345\236\213：",
			0, 
			QApplication::UnicodeUTF8);//"保护类型："
		strtmep.append(m_strlistProcType.at(0));
		for(int j=1;j<m_strlistProcType.size();j++)
		{
			strtmep.append(tr(","));
			strtmep.append(m_strlistProcType.at(j));
		}
		m_strProcType=strtmep;
		m_pUi->proctypelabel->setText(m_strProcType);
		m_pUi->proctypelabel->setStyleSheet("color:red;border:1px solid gray;");//设置为红色字体
		m_isFlash=true;//置闪烁标志
		
	}
#endif  //Compiler Switch
	m_pUi->toolButton_gfstart->setEnabled(true);//开启状态
	QMessageBox::information(this, 
		tr(m_strInfo),
		tr(strStartEnd));
}
//功放停止-槽函数
void CMymainWindow::gfstopBtn_clicked()
{
	m_pUi->toolButton_gfstop->setEnabled(false);//禁止状态
#ifdef UBUNTU_DEV //Compiler Switch
	//断开其他继电器，除了冷却系统
	 m_Gpiorw.write_do(write_address_0E,write_data_0,m_nGPIOfd);//断开励磁继电器
	 printf("####Disconnect Excitation Relay####\n");
	 m_Gpiorw.write_do(write_address_16,write_data_0,m_nGPIOfd);//断开分柜0软启动
	 printf("####Disconnect sub-cabinet 0 soft start####\n");
	 m_Gpiorw.write_do(write_address_18,write_data_0,m_nGPIOfd);//断开分柜0主继电器
	 printf("####Disconnect main relay of sub-cabinet 0 ####\n");
	 m_Gpiorw.write_do(write_address_1A,write_data_0,m_nGPIOfd);//断开分柜1软启动
	 printf("####Disconnect sub-cabinet 1 soft start####\n");
	 m_Gpiorw.write_do(write_address_1C,write_data_0,m_nGPIOfd);//断开分柜1主继电器
	  printf("####Disconnect main relay of sub-cabinet 1 ####\n");
	 m_Gpiorw.write_do(write_address_1E,write_data_0,m_nGPIOfd);//断开分柜2软启动
	 printf("####Disconnect sub-cabinet 2 soft start####\n");
	 m_Gpiorw.write_do(write_address_20,write_data_0,m_nGPIOfd);//断开分柜2主继电器
	  printf("####Disconnect main relay of sub-cabinet 2 ####\n");
	 m_Gpiorw.write_do(write_address_22,write_data_0,m_nGPIOfd);//断开分柜3软启动
	 printf("####Disconnect sub-cabinet 3 soft start####\n");
	 m_Gpiorw.write_do(write_address_24,write_data_0,m_nGPIOfd);//断开分柜3主继电器
	  printf("####Disconnect main relay of sub-cabinet 3 ####\n");
	 //等待60秒
	  QString strinfo=QApplication::translate("mainWindow", 
		"\346\217\220\347\244\272", 
		0, 
		QApplication::UnicodeUTF8);//提示
	 QString strWait60s=QApplication::translate("mainWindow", 
		 "\351\234\200\350\246\201\347\255\211\345\276\20560\347\247\222\351\222\237\357\274\214\350\257\267\347\250\215\345\200\231",
		 0, 
		 QApplication::UnicodeUTF8);
	 QMessageBox::warning(this, tr(strinfo), tr(strWait60s));//需要等待60秒钟，请稍候
     m_pTimer60s->start(60000);//启动60s定时器
	
#endif  //Compiler Switch
}
//功放复位-槽函数
void CMymainWindow::gfresetBtn_clicked()
{
	QString strResetEnd=QApplication::translate("mainWindow", 
		"\345\212\237\346\224\276\345\244\215\344\275\215\346\223\215\344\275\234\347\273\223\346\235\237",
		0, 
		QApplication::UnicodeUTF8);//功放复位操作结束
	m_pUi->toolButton_gfreset->setEnabled(false);//禁止状态
#ifdef UBUNTU_DEV //Compiler Switch
	m_Gpiorw.write_do(write_address_00,write_data_1,m_nGPIOfd);//1:复位FPGA
	printf("####gfresetBtn_clicked():Power Amplifier Reset FPGA ####\n");
	m_Gpiorw.write_do(write_address_00,write_data_0,m_nGPIOfd);//0:释放FPGA
	printf("####gfresetBtn_clicked():Power Amplifier Free FPGA ####\n");
#endif  //Compiler Switch
	m_pUi->toolButton_gfreset->setEnabled(true);//开启状态
	QMessageBox::information(this, 
		tr(m_strInfo),
		tr(strResetEnd));
}
 //"增益启动"槽函数
void CMymainWindow::zystartBtn_clicked()
{
  QString strZYstart=QApplication::translate("mainWindow", 
		  "\345\242\236\347\233\212\345\220\257\345\212\250\346\223\215\344\275\234\347\273\223\346\235\237",
		  0, 
		  QApplication::UnicodeUTF8);//增益启动操作结束
#ifdef UBUNTU_DEV //Compiler Switch
	m_Gpiorw.write_do(write_address_5E,write_data_1,m_nGPIOfd);
	printf("####zystartBtn_clicked():Gain Start####\n");
#endif  //Compiler Switch
	QMessageBox::information(this, 
		tr(m_strInfo),
		tr(strZYstart));
}
//"增益停止"槽函数
void CMymainWindow::zystopBtn_clicked()
{
 QString strZYstop=QApplication::translate("mainWindow",
	 "\345\242\236\347\233\212\345\201\234\346\255\242\346\223\215\344\275\234\347\273\223\346\235\237",
	 0, 
	 QApplication::UnicodeUTF8);//增益停止操作结束
#ifdef UBUNTU_DEV //Compiler Switch
	m_Gpiorw.write_do(write_address_5E,write_data_0,m_nGPIOfd);
	printf("####:zystopBtn_clicked():Gain Stop####\n");
#endif  //Compiler Switch
	QMessageBox::information(this, 
		tr(m_strInfo),
		tr(strZYstop));
}
//等待5秒-槽函数
void CMymainWindow::waiting5second()
{
#ifdef UBUNTU_DEV //Compiler Switch
  printf("####5 seconds have arrived####\n");
	if(m_pTimer5s-isActive ())
	{
		m_pTimer5s->stop();//5s定时器处于"开"的状态，应及时停止
	}
	printf("#####five seconds have passed #####\n");
	//判断冷却系统是否有保护？
	m_Gpiorw.read_adi(read_address_di_08,buffer_read,m_nGPIOfd);
    ret_di_data = m_Gpiorw.ai_data_compute(buffer_read);
	if(buffer_read[11]==1)
	{ /*冷却系统有保护*/
		//LED Panel-点亮警报灯,峰鸣器响
		m_Gpiorw.write_do(write_address_84,write_data_1,m_nGPIOfd);
	    m_pUi->proctypelabel->setText(m_strxtlqdy);
		//断开台体、功放冷却系统启动（指令或者继电器）
		m_Gpiorw.write_do(write_address_0C,write_data_0,m_nGPIOfd);
	    //可以进行复位操作(给出提示)
		QString strResetInfo=QApplication::translate("mainWindow", 
			"\345\217\257\344\273\245\350\277\233\350\241\214\345\212\237\346\224\276\345\244\215\344\275\215\346\223\215\344\275\234\344\272\206",
			0,
			QApplication::UnicodeUTF8));//"可以进行功放复位操作"提示语
		QMessageBox::information(this, 
		tr(m_strInfo),
		tr(strResetInfo));	
    } 
	else
	{
		/*冷却系统没有保护*/
	   if(m_iMode==NORMAL_MODE)
		{
			  /*正常调试模式下*/
		   m_Gpiorw.write_do(write_address_0E,write_data_1,m_nGPIOfd);//励磁继电器启动
		   printf("####Starting of Excitation Relay in Normal Mode####\n");
           m_Gpiorw.write_do(write_address_16,write_data_1,m_nGPIOfd);//分柜0软启动
		   printf("####Soft start of sub-cabinet 0 in Normal Mode####\n");
		   m_Gpiorw.write_do(write_address_1A,write_data_1,m_nGPIOfd);//分柜1软启动
		   printf("####Soft start of sub-cabinet 1 in Normal Mode####\n");
		   m_Gpiorw.write_do(write_address_1E,write_data_1,m_nGPIOfd);//分柜2软启动
		   printf("####Soft start of sub-cabinet 2 in Normal Mode####\n");
		   m_Gpiorw.write_do(write_address_22,write_data_1,m_nGPIOfd);//分柜3软启动
		   printf("####Soft start of sub-cabinet 3 in Normal Mode####\n");
			//等待3秒钟
		    m_pTimer3s->start(3000);//启动3s定时器
		}
		else if( m_iMode==ABNORMAL_MODE)
		{
			  /*异常模式下*/
             m_Gpiorw.write_do(write_address_16,write_data_1,m_nGPIOfd); //分柜0软启动
			 printf("####Soft start of sub-cabinet 0 in Abnormal Mode####\n");
			 m_Gpiorw.write_do(write_address_1A,write_data_1,m_nGPIOfd);//分柜1软启动
			 printf("####Soft start of sub-cabinet 1 in Abnormal Mode####\n");
			 m_Gpiorw.write_do(write_address_1E,write_data_1,m_nGPIOfd);//分柜2软启动
			 printf("####Soft start of sub-cabinet 2 in Abnormal Mode####\n");
			 m_Gpiorw.write_do(write_address_22,write_data_1,m_nGPIOfd);//分柜3软启动
			 printf("####Soft start of sub-cabinet 3 in Abnormal Mode####\n");
			 //等待3秒钟
             m_pTimer3s->start(3000);//启动3s定时器
			
		}
	}
#endif  //Compiler Switch
}
//等待3秒-槽函数
void CMymainWindow::waiting3second()
{
#ifdef UBUNTU_DEV //Compiler Switch
  printf("####3 seconds have arrived####\n");
	if(m_pTimer3s-isActive ())
	{
		m_pTimer3s->stop();//3s定时器处于"开"的状态，应及时停止
	}
	if(m_iMode==NORMAL_MODE)
	{
		//正常调试模式下
		//判断励磁开路是否有保护？依据励磁电流小于0.5A为开路
		if((g_GPIOData.fExcitCurrent-EXCIT_CURRENT_LIMIT)<0.01)
		{
			//存在励磁开路保护
			 //LED Panel-点亮警报灯,峰鸣器响
		    m_Gpiorw.write_do(write_address_84,write_data_1,m_nGPIOfd);
		    printf("####Lighting the alarm lights####\n");
			m_strProcType=tr("励磁开路");
		    m_pUi->proctypelabel->setText(m_strProcType);
		    m_pUi->proctypelabel->setStyleSheet("color:red;border:1px solid gray;");//设置为红色字体
		    m_isFlash=true;//置闪烁标志
		}
		else
		{
			//不存在励磁开路
			CloseSubCabinetRelay();//分柜高压继电器吸合
			int iBusVoltDownCnt=0;//分柜正母线电压过低保护计数器
			int iBusVoltUpCnt=0;  //分柜正母线电压过高保护计数器
			for(int i=0;i<4;i++)
			{
				if((g_GPIOData.fSlaveActBusVolt[i]-BUS_VOLT_DOWN_LIMIT)<0.01)
				{
					
					iBusVoltDownCnt++;
				}
			}//for(int i=0;i<4;i++)
			printf("###waiting3second()::iBusVoltDownCnt=%d###\n",iBusVoltDownCnt);
			if(iBusVoltDownCnt==0)//不存在分柜母线电压过低保护,继续判是否存在过高保护
			{
				printf("###There is no over-low voltage protection for sub-cabinet busbar###\n");
			  for(int j=0;j<4;j++)
			   {
				if((g_GPIOData.fSlaveActBusVolt[i]-BUS_VOLT_UP_LIMIT)<0.01)
				{
					
					iBusVoltUpCnt++;
				}
			   }// for(int j=0;j<4;j++)
			  printf("###waiting3second()::iBusVoltUpCnt=%d###\n",iBusVoltUpCnt);
			  if(iBusVoltUpCnt==0)
			  {
				//不存在分柜母线电压过高保护
				  printf("###There is no overvoltage protection for sub-cabinet busbar###\n");
				//LED Panel-预备灯灭(先灭灯后点灯，以防其他情况已点亮)
			     m_Gpiorw.write_do(write_address_80,write_data_0,m_nGPIOfd);
			    //LED Panel-初始化OK灯灭
			    m_Gpiorw.write_do(write_address_82,write_data_0,m_nGPIOfd);
				 //LED Panel-点亮预备灯
			    m_Gpiorw.write_do(write_address_80,write_data_1,m_nGPIOfd);
		         //LED Panel-点亮初始化OK灯
			    m_Gpiorw.write_do(write_address_82,write_data_1,m_nGPIOfd);
				QString strTemp=QApplication::translate("mainWindow", 
					"\345\210\206\346\237\234\346\257\215\347\272\277\344\270\215\345\255\230\345\234\250\350\277\207\344\275\216\345\222\214\350\277\207\351\253\230\344\277\235\346\212\244\346\203\205\345\206\265,\345\207\206\345\244\207\347\201\257\345\267\262\347\202\271\344\272\256,\347\255\211\345\276\205\345\274\200\345\242\236\347\233\212",
					0, QApplication::UnicodeUTF8);//分柜母线不存在过低和过高保护情况,准备灯已点亮,等待开增益
				QMessageBox::information(this, 
		        tr(m_strInfo),
		        tr(strTemp));	
			  }//if(iBusVoltUpCnt==0)
			  else
			  {
				 //存在分柜母线电压过高保护
				  printf("###Overvoltage protection of sub-cabinet busbar###\n");
				 //软件关闭使能(指中断？2019.04.14)
				 m_Gpiorw.write_do(write_address_02,write_data_0,m_nGPIOfd);
				 printf("###Turn off interrupt enable signal###\n");//关闭中断使能信号
				 //LED Panel-点亮警报灯,峰鸣器响
		         m_Gpiorw.write_do(write_address_84,write_data_1,m_nGPIOfd);
		         printf("####Lighting the alarm lights####\n");
			  }
			}//if(iBusVoltDownCnt==0)
			else
			{
				//存在分柜母线电压过低保护，则软件关闭使能(指中断？2019.04.14)
				 printf("###Over-low voltage protection of sub-cabinet busbar###\n");
				 m_Gpiorw.write_do(write_address_02,write_data_0,m_nGPIOfd);
				 printf("###Turn off interrupt enable signal###\n");//关闭中断使能信号
				 //LED Panel-点亮警报灯,峰鸣器响
		         m_Gpiorw.write_do(write_address_84,write_data_1,m_nGPIOfd);
		         printf("####Lighting the alarm lights####\n");
			}	
		}
	}
	else if(m_iMode===ABNORMAL_MODE)
	{
		//异常模式下
		CloseSubCabinetRelay();//分柜高压继电器吸合
	}
#endif  //Compiler Switch
}
//分柜高压继电器吸合
void CMymainWindow::CloseSubCabinetRelay()
{
	 m_Gpiorw.write_do(write_address_18,write_data_1,m_nGPIOfd); //打开分柜0主继电器
	 printf("####Open sub-cabinet 0 main relay in Abnormal Mode####\n");
	 m_Gpiorw.write_do(write_address_1C,write_data_1,m_nGPIOfd); //打开分柜1主继电器
	 printf("####Open sub-cabinet 1 main relay in Abnormal Mode####\n");
	 m_Gpiorw.write_do(write_address_20,write_data_1,m_nGPIOfd); //打开分柜2主继电器
	 printf("####Open sub-cabinet 2 main relay in Abnormal Mode####\n");
   m_Gpiorw.write_do(write_address_24,write_data_1,m_nGPIOfd);//打开分柜3主继电器
   printf("####Open sub-cabinet 3 main relay in Abnormal Mode####\n");
}
//等待60秒-槽函数
void CMymainWindow::waiting60second()
{
#ifdef UBUNTU_DEV //Compiler Switch
	printf("####60 seconds have arrived####\n");
	if(m_pTimer60s-isActive ())
	{
		m_pTimer60s->stop();//60s定时器处于"开"的状态，应及时停止
	}
 QString strStopEnd=QApplication::translate("mainWindow", 
"\345\212\237\346\224\276\345\201\234\346\255\242\346\223\215\344\275\234\347\273\223\346\235\237", 
0, 
QApplication::UnicodeUTF8);//功放停止操作结束
    
	//断开台体、功放冷却系统启动（指令或者继电器）
	m_Gpiorw.write_do(write_address_0C,write_data_0,m_nGPIOfd);
	printf("####Disconnect the platform and start the power amplifier cooling system####\n");
	m_pUi->toolButton_gfstop->setEnabled(true);//开启状态
	QMessageBox::information(this, 
		tr(m_strInfo),
		tr(strStopEnd));	
#endif  //Compiler Switch
}
//分柜号选择槽函数
void CMymainWindow::comboBox_fgnum_clicked(int index)
{
	switch(index)
	{
	case 0:
		m_iCurrFGnum=1;
		m_pUi->groupBox_fgRT->setTitle(QApplication::translate("mainWindow", 
			"\345\210\206\346\237\2341\345\256\236\346\227\266\344\277\241\346\201\257", 
			0, QApplication::UnicodeUTF8));
		break;
    case 1:
		m_iCurrFGnum=2;
		m_pUi->groupBox_fgRT->setTitle(QApplication::translate("mainWindow", 
			"\345\210\206\346\237\2342\345\256\236\346\227\266\344\277\241\346\201\257", 
			0, QApplication::UnicodeUTF8));
		break;
	case 2:
		m_iCurrFGnum=3;
		m_pUi->groupBox_fgRT->setTitle(QApplication::translate("mainWindow", 
			"\345\210\206\346\237\2343\345\256\236\346\227\266\344\277\241\346\201\257", 
			0, QApplication::UnicodeUTF8));
		break;
	case 3:
		m_iCurrFGnum=4;
		m_pUi->groupBox_fgRT->setTitle(QApplication::translate("mainWindow", 
			"\345\210\206\346\237\2344\345\256\236\346\227\266\344\277\241\346\201\257", 
			0, QApplication::UnicodeUTF8));
		break;
	}

}
//初始化保护类型(数据)
void CMymainWindow::initProctype()
{
	//紧急停机
	 m_strjjtj=QApplication::translate("mainWindow", 
		 "\347\264\247\346\200\245\345\201\234\346\234\272", 
		 0,
		 QApplication::UnicodeUTF8);
	//滑台过位移
	 m_strhtgwy=QApplication::translate("mainWindow",
		 "\346\273\221\345\217\260\350\277\207\344\275\215\347\247\273",
		 0, 
		 QApplication::UnicodeUTF8);
	 //振动台过位移
	 m_strzdtgwy= QApplication::translate("mainWindow",
		 "\346\214\257\345\212\250\345\217\260\350\277\207\344\275\215\347\247\273", 
		 0, 
		 QApplication::UnicodeUTF8);
	 //滑台低液位
	 m_strhtdyw=QApplication::translate("mainWindow", 
		 "\346\273\221\345\217\260\344\275\216\346\266\262\344\275\215", 
		 0, 
		 QApplication::UnicodeUTF8);
	 //振动台冷却
	 m_strzdtlq= QApplication::translate("mainWindow",
		 "\346\214\257\345\212\250\345\217\260\345\206\267\345\215\264",
		 0, 
		 QApplication::UnicodeUTF8);
	 //滑台轴承低压
	 m_strhtzcdy=QApplication::translate("mainWindow",
		 "\346\273\221\345\217\260\350\275\264\346\211\277\344\275\216\345\216\213",
		 0, 
		 QApplication::UnicodeUTF8);
	 //振动台过温
	 m_strzdtgw=QApplication::translate("mainWindow", 
		 "\346\214\257\345\212\250\345\217\260\350\277\207\346\270\251", 
		 0, 
		 QApplication::UnicodeUTF8);
	 //耳轴过位移
	 m_strezgwy=QApplication::translate("mainWindow", 
		 "\350\200\263\350\275\264\350\277\207\344\275\215\347\247\273",
		 0, 
		 QApplication::UnicodeUTF8);
	 //功放热继保护
	 m_strgfrjbh=QApplication::translate("mainWindow", 
		 "\345\212\237\346\224\276\347\203\255\347\273\247\344\277\235\346\212\244", 
		 0, 
		 QApplication::UnicodeUTF8);
	 //静压轴承低压
	 m_strjyzcdy=QApplication::translate("mainWindow", 
		 "\351\235\231\345\216\213\350\275\264\346\211\277\344\275\216\345\216\213", 
		 0, 
		 QApplication::UnicodeUTF8);
	 //门保护
	 m_strmbh=QApplication::translate("mainWindow", 
		 "\351\227\250\344\277\235\346\212\244", 
		 0, 
		 QApplication::UnicodeUTF8);
	 //系统冷却单元
	 m_strxtlqdy=QApplication::translate("mainWindow",
		 "\347\263\273\347\273\237\345\206\267\345\215\264\345\215\225\345\205\203",
		 0, 
		 QApplication::UnicodeUTF8);
}
//"功率模块启动"槽函数
void CMymainWindow::startupBtn_clicked()
{
	m_CANDatarw.startPowerModule(m_CANfd);
	QString strStart =QApplication::translate("mainWindow", 
		"\345\212\237\347\216\207\346\250\241\345\235\227\345\220\257\345\212\250\345\221\275\344\273\244\344\270\213\345\217\221\346\210\220\345\212\237",
		0, 
		QApplication::UnicodeUTF8);//功率模块启动命令下发成功 
	 QMessageBox::information(this, 
		tr(m_strInfo),
		tr(strStart));
}
//"功率模块关机"槽函数
void CMymainWindow::shutdownBtn_clicked()
{
	m_CANDatarw.startPowerModule(m_CANfd);
	QString strClose=QApplication::translate("mainWindow",
		"\345\212\237\347\216\207\346\250\241\345\235\227\345\205\263\346\234\272\345\221\275\344\273\244\344\270\213\345\217\221\346\210\220\345\212\237",
		0, 
		QApplication::UnicodeUTF8);//功率模块关机命令下发成功
	 QMessageBox::information(this, 
		tr(m_strInfo),
		tr(strClose));
}